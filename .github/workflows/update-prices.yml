name: MapleStory Equipment Price Auto Update

on:
  schedule:
    - cron: '*/30 * * * *'
  workflow_dispatch:
    inputs:
      target_items:
        description: 'Number of items to update (default: ALL)'
        default: 'ALL'
        type: string

permissions:
  contents: write
  actions: read

env:
  TZ: Asia/Tokyo

jobs:
  update-prices:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Setup Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Setup Chrome and ChromeDriver
      run: |
        sudo apt-get update
        sudo apt-get install -y wget gnupg
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        
        echo "Using simplified ChromeDriver download approach"
        CHROMEDRIVER_VERSION="136.0.7103.92"
        
        CHROMEDRIVER_URL="https://storage.googleapis.com/chrome-for-testing-public/$CHROMEDRIVER_VERSION/linux64/chromedriver-linux64.zip"
        echo "Downloading from: $CHROMEDRIVER_URL"
        
        wget -O /tmp/chromedriver.zip "$CHROMEDRIVER_URL" || {
          echo "Download failed, trying alternative version"
          CHROMEDRIVER_VERSION="135.0.7103.92"
          CHROMEDRIVER_URL="https://storage.googleapis.com/chrome-for-testing-public/$CHROMEDRIVER_VERSION/linux64/chromedriver-linux64.zip"
          wget -O /tmp/chromedriver.zip "$CHROMEDRIVER_URL"
        }
        
        sudo unzip /tmp/chromedriver.zip -d /tmp/
        sudo mv /tmp/chromedriver-linux64/chromedriver /usr/local/bin/
        sudo chmod +x /usr/local/bin/chromedriver
        
        echo "Installation completed:"
        google-chrome --version
        chromedriver --version
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Update equipment prices
      run: |
        echo "Starting MapleStory Equipment Price Auto Update at $(date '+%Y-%m-%d %H:%M:%S JST')"
        python scripts/update_prices.py
        echo "MapleStory Equipment Price Auto Update completed at $(date '+%Y-%m-%d %H:%M:%S JST')"
      env:
        TARGET_ITEMS: ${{ github.event.inputs.target_items || 'ALL' }}
        PYTHONPATH: ${{ github.workspace }}
    
    # 🔄 個別アイテム価格履歴更新（分離されたスクリプト）
    - name: Update individual item price history
      run: |
        echo "🔄 Starting individual item price history update at $(date '+%Y-%m-%d %H:%M:%S JST')"
        python scripts/historical_price_tracker.py
        echo "✅ Individual item price history update completed at $(date '+%Y-%m-%d %H:%M:%S JST')"
      env:
        PYTHONPATH: ${{ github.workspace }}
    
    # 📊 総価格集計処理（分離されたスクリプト）
    - name: Aggregate total price data
      run: |
        echo "📊 Starting total price aggregation at $(date '+%Y-%m-%d %H:%M:%S JST')"
        python scripts/total_price_aggregator.py
        echo "✅ Total price aggregation completed at $(date '+%Y-%m-%d %H:%M:%S JST')"
      env:
        PYTHONPATH: ${{ github.workspace }}
    
    # 📈 個別アイテムチャートデータ出力
    - name: Export individual item chart data
      run: |
        echo "📈 Exporting individual item chart data for web display"
        python -c "
        import sys
        sys.path.append('scripts')
        from historical_price_tracker import HistoricalPriceTracker
        import json
        import os
        
        try:
            tracker = HistoricalPriceTracker()
            
            # equipment_prices.jsonが存在するかチェック
            if not os.path.exists('data/equipment_prices.json'):
                print('equipment_prices.json not found, skipping chart export')
                sys.exit(0)
            
            with open('data/equipment_prices.json', 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            exported = 0
            total_items = len(data)
            
            print(f'Starting chart export for {total_items} items...')
            
            for i, item_id in enumerate(data.keys()):
                if i % 50 == 0:  # 進捗表示
                    print(f'Progress: {i}/{total_items} items processed')
                
                for interval in ['1hour', '12hour', '1day']:
                    try:
                        if tracker.export_chart_data_for_web(item_id, interval):
                            exported += 1
                    except Exception as e:
                        print(f'Error exporting chart for item {item_id} ({interval}): {e}')
                        continue
            
            print(f'✅ Exported {exported} individual item chart data files')
            
        except Exception as e:
            print(f'❌ Error in chart export: {e}')
            sys.exit(1)
        "
      env:
        PYTHONPATH: ${{ github.workspace }}
    
    # 📊 総価格チャートデータ出力確認
    - name: Verify total price chart data
      run: |
        echo "📊 Verifying total price chart data files"
        
        for interval in 1hour 12hour 1day; do
          file="data/price_history/total_price_${interval}.json"
          if [ -f "$file" ]; then
            size=$(stat -c%s "$file")
            echo "✅ ${file}: ${size} bytes"
            
            # JSONファイルの妥当性チェック
            if python -c "import json; json.load(open('$file'))"; then
              echo "   JSON format: valid"
            else
              echo "   ❌ JSON format: invalid"
            fi
          else
            echo "❌ ${file}: not found"
          fi
        done
    
    # 🔍 改善された変更検出（price_historyとequipment_pricesの両方）
    - name: Check for changes
      id: check-changes
      run: |
        # データディレクトリの変更をチェック
        if [ -n "$(git status --porcelain data/)" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "✅ Data changes detected:"
          git status --short data/
          
          # 詳細な変更情報を取得
          EQUIPMENT_CHANGED=$(git status --porcelain data/equipment_prices.json | wc -l)
          HISTORY_CHANGED=$(git status --porcelain data/price_history/ | wc -l)
          
          echo "equipment_changed=${EQUIPMENT_CHANGED}" >> $GITHUB_OUTPUT
          echo "history_changed=${HISTORY_CHANGED}" >> $GITHUB_OUTPUT
          
        else
          echo "changed=false" >> $GITHUB_OUTPUT
          echo "ℹ️ No changes detected in data directory"
          echo "equipment_changed=0" >> $GITHUB_OUTPUT
          echo "history_changed=0" >> $GITHUB_OUTPUT
        fi
    
    # 📤 改善されたコミット（分離されたスクリプト対応）
    - name: Commit and push changes
      if: steps.check-changes.outputs.changed == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action Bot"
        
        # 変更の詳細情報を取得
        UPDATED_COUNT=$(git diff data/equipment_prices.json | grep -c '^+.*item_price' || echo "0")
        INDIVIDUAL_CHARTS=$(find data/price_history -name "*_1hour.json" ! -name "total_price_*" 2>/dev/null | wc -l || echo "0")
        TOTAL_CHARTS=$(find data/price_history -name "total_price_*.json" 2>/dev/null | wc -l || echo "0")
        CURRENT_TIME=$(date '+%Y-%m-%d %H:%M:%S JST')
        
        # 統計情報の生成
        if [ -f "data/equipment_prices.json" ]; then
          TOTAL_ITEMS=$(python -c "import json; print(len(json.load(open('data/equipment_prices.json'))))" 2>/dev/null || echo "0")
        else
          TOTAL_ITEMS="0"
        fi
        
        git add data/
        git commit -m "Auto-update: Equipment prices & historical data (分離スクリプト対応)

📊 Update Summary:
- Update time: ${CURRENT_TIME}
- Total items: ${TOTAL_ITEMS}
- Updated items: ${UPDATED_COUNT}
- Individual charts: ${INDIVIDUAL_CHARTS}
- Total price charts: ${TOTAL_CHARTS}

🔧 Architecture:
- Individual item history: scripts/historical_price_tracker.py
- Total price aggregation: scripts/total_price_aggregator.py
- Automated by GitHub Actions (分離スクリプト版)"
        
        git push origin ${{ github.ref_name }}
        
        echo "✅ Successfully updated ${UPDATED_COUNT} items with ${INDIVIDUAL_CHARTS} individual charts and ${TOTAL_CHARTS} total price charts"
    
    # 📈 詳細な実行サマリー生成
    - name: Generate detailed summary
      run: |
        echo "## 🍁 MapleStory Equipment Price Auto Update Results (分離スクリプト版)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 基本情報" >> $GITHUB_STEP_SUMMARY
        echo "| Item | Result |" >> $GITHUB_STEP_SUMMARY
        echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| 実行時刻 | $(date '+%Y-%m-%d %H:%M:%S JST') |" >> $GITHUB_STEP_SUMMARY
        echo "| データ変更 | ${{ steps.check-changes.outputs.changed }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 対象アイテム | ${{ env.TARGET_ITEMS }} |" >> $GITHUB_STEP_SUMMARY
        echo "| ワークフロー実行ID | ${{ github.run_id }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 🔧 スクリプト構成" >> $GITHUB_STEP_SUMMARY
        echo "| スクリプト | 用途 | 状態 |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|------|------|" >> $GITHUB_STEP_SUMMARY
        echo "| historical_price_tracker.py | 個別アイテム価格履歴 | ✅ 実行済み |" >> $GITHUB_STEP_SUMMARY
        echo "| total_price_aggregator.py | 総価格集計 | ✅ 実行済み |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.check-changes.outputs.changed }}" == "true" ]; then
          echo "### ✅ 更新結果" >> $GITHUB_STEP_SUMMARY
          echo "- 価格データ更新: ${{ steps.check-changes.outputs.equipment_changed }}ファイル" >> $GITHUB_STEP_SUMMARY
          echo "- 履歴データ更新: ${{ steps.check-changes.outputs.history_changed }}ファイル" >> $GITHUB_STEP_SUMMARY
          echo "- チャートデータ生成: 完了" >> $GITHUB_STEP_SUMMARY
          echo "- コミット・プッシュ: 完了" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎉 **価格更新とチャート生成が正常に完了しました！**" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ℹ️ 実行結果" >> $GITHUB_STEP_SUMMARY
          echo "- 変更なし（価格に変動がありませんでした）" >> $GITHUB_STEP_SUMMARY
          echo "- システムは正常に動作しています" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📁 生成ファイル" >> $GITHUB_STEP_SUMMARY
        echo "- \`data/equipment_prices.json\`: 最新価格データ" >> $GITHUB_STEP_SUMMARY
        echo "- \`data/price_history/history_*.json\`: 個別アイテム履歴" >> $GITHUB_STEP_SUMMARY
        echo "- \`data/price_history/total_price_*.json\`: 総価格履歴" >> $GITHUB_STEP_SUMMARY
        echo "- \`data/price_history/*_*.json\`: 個別チャートデータ" >> $GITHUB_STEP_SUMMARY

    # 🚨 エラー時の診断情報
    - name: Collect diagnostic info on failure
      if: failure()
      run: |
        echo "🚨 ワークフロー実行中にエラーが発生しました" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 診断情報" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY  # ← ここが問題！
        echo "実行時刻: $(date '+%Y-%m-%d %H:%M:%S JST')" >> $GITHUB_STEP_SUMMARY
        echo "Python版本: $(python --version)" >> $GITHUB_STEP_SUMMARY
        echo "作業ディレクトリ: $(pwd)" >> $GITHUB_STEP_SUMMARY
        echo "利用可能スペース: $(df -h . | tail -1)" >> $GITHUB_STEP_SUMMARY
        
        if [ -d "data" ]; then
          echo "dataディレクトリ構造:" >> $GITHUB_STEP_SUMMARY
          ls -la data/ >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -d "scripts" ]; then
          echo "scriptsディレクトリ構造:" >> $GITHUB_STEP_SUMMARY
          ls -la scripts/ >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY  # ← ここも問題！
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "❗ **解決方法**: ログを確認し、スクリプトファイルが正しく配置されているか確認してください。" >> $GITHUB_STEP_SUMMARY
