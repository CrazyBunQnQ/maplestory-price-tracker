name: MapleStory Equipment Price Auto Update

on:
  schedule:
    - cron: '*/30 * * * *'
  workflow_dispatch:
    inputs:
      target_items:
        description: 'Number of items to update (default: ALL)'
        default: 'ALL'
        type: string

permissions:
  contents: write
  actions: read

env:
  TZ: Asia/Tokyo

concurrency:
  group: price-update-${{ github.ref }}
  cancel-in-progress: true

jobs:
  update-prices:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Setup Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Complete cleanup
      run: |
        sudo apt-get remove -y google-chrome-stable chromium-browser || true
        sudo rm -rf /usr/local/bin/chromedriver
        sudo rm -rf /usr/bin/chromedriver
        sudo apt-get autoremove -y
        sudo apt-get clean
        echo "Cleanup completed"
    
    - name: Install Chrome and ChromeDriver
      run: |
        sudo apt-get update
        sudo apt-get install -y wget gnupg curl unzip
        
        # Install Google Chrome
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        
        # Get Chrome major version
        CHROME_MAJOR=$(google-chrome --version | grep -oP '\d+' | head -1)
        echo "Chrome major version: $CHROME_MAJOR"
        
        # Download ChromeDriver - try multiple versions
        CHROMEDRIVER_DOWNLOADED=false
        
        # Version list for fallback
        VERSIONS=(
          "${CHROME_MAJOR}.0.0.0"
          "131.0.6778.204"
          "130.0.6723.116"
          "129.0.6668.100"
          "128.0.6613.137"
        )
        
        for VERSION in "${VERSIONS[@]}"; do
          echo "Trying ChromeDriver version: $VERSION"
          URL="https://storage.googleapis.com/chrome-for-testing-public/$VERSION/linux64/chromedriver-linux64.zip"
          
          if wget --timeout=15 -O /tmp/chromedriver.zip "$URL" 2>/dev/null; then
            echo "Successfully downloaded: $VERSION"
            CHROMEDRIVER_DOWNLOADED=true
            break
          else
            echo "Failed: $VERSION"
          fi
        done
        
        if [ "$CHROMEDRIVER_DOWNLOADED" != "true" ]; then
          echo "All ChromeDriver downloads failed"
          exit 1
        fi
        
        # Extract and install
        sudo unzip -o /tmp/chromedriver.zip -d /tmp/
        
        if [ -f "/tmp/chromedriver-linux64/chromedriver" ]; then
          sudo mv /tmp/chromedriver-linux64/chromedriver /usr/local/bin/
        elif [ -f "/tmp/chromedriver" ]; then
          sudo mv /tmp/chromedriver /usr/local/bin/
        else
          echo "ChromeDriver binary not found"
          exit 1
        fi
        
        sudo chmod +x /usr/local/bin/chromedriver
        
        echo "Installation verification:"
        google-chrome --version
        chromedriver --version
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install webdriver-manager==4.0.1
    
    - name: Create required directories
      run: |
        mkdir -p data/price_history
        mkdir -p scripts
    
    - name: Environment verification
      run: |
        echo "=== Environment Verification ==="
        python --version
        google-chrome --version
        chromedriver --version
        which chromedriver
        ls -la /usr/local/bin/chromedriver
        echo "Memory: $(free -h | grep Mem)"
        echo "Disk: $(df -h | grep '/$')"
    
    - name: Git configuration
      run: |
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action Bot"
        git config --global pull.rebase false
    
    - name: Update equipment prices
      run: |
        echo "Starting price update at $(date '+%Y-%m-%d %H:%M:%S JST')"
        python scripts/update_prices.py
        echo "Price update completed at $(date '+%Y-%m-%d %H:%M:%S JST')"
      env:
        TARGET_ITEMS: ${{ github.event.inputs.target_items || 'ALL' }}
        PYTHONPATH: ${{ github.workspace }}
        PYTHONUNBUFFERED: 1
    
    - name: Update price history
      run: |
        echo "Starting price history update"
        python scripts/historical_price_tracker.py || echo "Historical tracker failed"
      env:
        PYTHONPATH: ${{ github.workspace }}
    
    - name: Aggregate total price data
      run: |
        echo "Starting total price aggregation"
        python scripts/total_price_aggregator.py || echo "Aggregator failed"
      env:
        PYTHONPATH: ${{ github.workspace }}
    
    - name: Check for changes
      id: check-changes
      run: |
        if [ -n "$(git status --porcelain data/)" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "Data changes detected"
          CHANGED_FILES=$(git status --porcelain data/ | wc -l)
          echo "changed_files=${CHANGED_FILES}" >> $GITHUB_OUTPUT
        else
          echo "changed=false" >> $GITHUB_OUTPUT
          echo "No changes detected"
          echo "changed_files=0" >> $GITHUB_OUTPUT
        fi
    
    - name: Commit and push changes
      if: steps.check-changes.outputs.changed == 'true'
      run: |
        git add data/
        git fetch origin
        
        CURRENT_TIME=$(date '+%Y-%m-%d %H:%M:%S JST')
        COMMIT_MESSAGE="Auto-update: Equipment prices (ChromeDriver compatibility)

        - Update time: ${CURRENT_TIME}
        - Changed files: ${{ steps.check-changes.outputs.changed_files }}
        - Chrome/ChromeDriver compatibility verified
        - Automated by GitHub Actions"
        
        git commit -m "$COMMIT_MESSAGE" || echo "No changes to commit"
        
        # Multiple push strategies
        if git push origin ${{ github.ref_name }}; then
          echo "Push successful"
        elif git merge origin/${{ github.ref_name }} --no-edit && git push origin ${{ github.ref_name }}; then
          echo "Push successful after merge"
        elif git push --force-with-lease origin ${{ github.ref_name }}; then
          echo "Push successful with force-with-lease"
        else
          echo "All push strategies failed"
          exit 1
        fi
    
    - name: Generate summary
      run: |
        echo "## MapleStory Equipment Price Auto Update Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### System Information" >> $GITHUB_STEP_SUMMARY
        echo "| Item | Result |" >> $GITHUB_STEP_SUMMARY
        echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Execution Time | $(date '+%Y-%m-%d %H:%M:%S JST') |" >> $GITHUB_STEP_SUMMARY
        echo "| Chrome Version | $(google-chrome --version 2>/dev/null) |" >> $GITHUB_STEP_SUMMARY
        echo "| ChromeDriver Version | $(chromedriver --version 2>/dev/null) |" >> $GITHUB_STEP_SUMMARY
        echo "| Data Changed | ${{ steps.check-changes.outputs.changed }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Changed Files | ${{ steps.check-changes.outputs.changed_files }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Target Items | ${{ env.TARGET_ITEMS }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.check-changes.outputs.changed }}" == "true" ]; then
          echo "**✅ Price update completed successfully!**" >> $GITHUB_STEP_SUMMARY
        else
          echo "**ℹ️ No changes detected**" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Diagnostic info on failure
      if: failure()
      run: |
        echo "## Workflow Failed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Diagnostic Information" >> $GITHUB_STEP_SUMMARY
        echo "- Execution time: $(date '+%Y-%m-%d %H:%M:%S JST')" >> $GITHUB_STEP_SUMMARY
        echo "- Chrome: $(google-chrome --version 2>/dev/null || echo 'Not found')" >> $GITHUB_STEP_SUMMARY
        echo "- ChromeDriver: $(chromedriver --version 2>/dev/null || echo 'Not found')" >> $GITHUB_STEP_SUMMARY
        echo "- Available memory: $(free -h | grep Mem | awk '{print $7}' || echo 'Unknown')" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Check logs for detailed error information.**" >> $GITHUB_STEP_SUMMARY
