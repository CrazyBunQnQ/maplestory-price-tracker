name: MapleStory Equipment Price Auto Update

on:
  schedule:
    - cron: '*/30 * * * *'
  workflow_dispatch:
    inputs:
      target_items:
        description: 'Number of items to update (default: ALL)'
        default: 'ALL'
        type: string

permissions:
  contents: write
  actions: read

env:
  TZ: Asia/Tokyo

# 重複実行防止
concurrency:
  group: price-update-${{ github.ref }}
  cancel-in-progress: true

jobs:
  update-prices:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Setup Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Setup Chrome and ChromeDriver (Simplified)
      run: |
        sudo apt-get update
        sudo apt-get install -y wget gnupg curl
        
        # Google Chrome最新版をインストール
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        
        # Chrome for Testing APIから最新のChromeDriverを取得（簡略化）
        echo "Getting Chrome version..."
        CHROME_VERSION=$(google-chrome --version | grep -oP '\d+' | head -1)
        echo "Chrome major version: $CHROME_VERSION"
        
        # 対応するChromeDriverバージョンを試行
        CHROMEDRIVER_URLS=(
          "https://storage.googleapis.com/chrome-for-testing-public/${CHROME_VERSION}.0.0.0/linux64/chromedriver-linux64.zip"
          "https://storage.googleapis.com/chrome-for-testing-public/131.0.6778.204/linux64/chromedriver-linux64.zip"
          "https://storage.googleapis.com/chrome-for-testing-public/130.0.6723.116/linux64/chromedriver-linux64.zip"
          "https://storage.googleapis.com/chrome-for-testing-public/129.0.6668.100/linux64/chromedriver-linux64.zip"
        )
        
        DOWNLOAD_SUCCESS=false
        for URL in "${CHROMEDRIVER_URLS[@]}"; do
          echo "Trying: $URL"
          if wget --timeout=10 -O /tmp/chromedriver.zip "$URL" 2>/dev/null; then
            echo "Downloaded successfully: $URL"
            DOWNLOAD_SUCCESS=true
            break
          else
            echo "Failed: $URL"
          fi
        done
        
        if [ "$DOWNLOAD_SUCCESS" = false ]; then
          echo "All ChromeDriver downloads failed"
          exit 1
        fi
        
        # ChromeDriverの展開とインストール
        sudo unzip -o /tmp/chromedriver.zip -d /tmp/
        
        if [ -f "/tmp/chromedriver-linux64/chromedriver" ]; then
          sudo mv /tmp/chromedriver-linux64/chromedriver /usr/local/bin/
        elif [ -f "/tmp/chromedriver" ]; then
          sudo mv /tmp/chromedriver /usr/local/bin/
        else
          echo "ChromeDriver binary not found"
          exit 1
        fi
        
        sudo chmod +x /usr/local/bin/chromedriver
        
        echo "Installation completed:"
        google-chrome --version
        chromedriver --version
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create required directories
      run: |
        mkdir -p data/price_history
        mkdir -p scripts
    
    - name: Environment diagnostic
      run: |
        echo "=== Environment Information ==="
        python --version
        pip list | grep -E "(selenium|requests|beautifulsoup4|lxml|numpy)"
        google-chrome --version
        chromedriver --version
        ls -la data/ || echo "data directory not found"
        echo "Available memory:"
        free -h
        echo "Available disk space:"
        df -h
    
    - name: Git configuration setup
      run: |
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action Bot"
        git config --global pull.rebase false
        git config --global merge.ours.driver true
        echo "Git configuration completed"
    
    - name: Update equipment prices
      run: |
        echo "Starting MapleStory Equipment Price Auto Update at $(date '+%Y-%m-%d %H:%M:%S JST')"
        python scripts/update_prices.py
        echo "MapleStory Equipment Price Auto Update completed at $(date '+%Y-%m-%d %H:%M:%S JST')"
      env:
        TARGET_ITEMS: ${{ github.event.inputs.target_items || 'ALL' }}
        PYTHONPATH: ${{ github.workspace }}
        PYTHONUNBUFFERED: 1
    
    - name: Update individual item price history
      run: |
        echo "Starting individual item price history update"
        python scripts/historical_price_tracker.py || echo "Historical price tracker failed"
      env:
        PYTHONPATH: ${{ github.workspace }}
    
    - name: Aggregate total price data
      run: |
        echo "Starting total price aggregation"
        python scripts/total_price_aggregator.py || echo "Total price aggregator failed"
      env:
        PYTHONPATH: ${{ github.workspace }}
    
    - name: Check for changes and show git status
      id: check-changes
      run: |
        echo "=== Git Status Diagnostic ==="
        git status --porcelain
        git status
        
        echo "=== Changed Files ==="
        git diff --name-only
        
        if [ -n "$(git status --porcelain data/)" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "Data changes detected"
          
          CHANGED_FILES=$(git status --porcelain data/ | wc -l)
          echo "changed_files=${CHANGED_FILES}" >> $GITHUB_OUTPUT
          
          echo "Changed files in data/:"
          git status --short data/
        else
          echo "changed=false" >> $GITHUB_OUTPUT
          echo "No changes detected"
          echo "changed_files=0" >> $GITHUB_OUTPUT
        fi
    
    - name: Robust commit and push with conflict resolution
      if: steps.check-changes.outputs.changed == 'true'
      run: |
        echo "=== Starting robust commit and push process ==="
        
        # 現在の状態を確認
        echo "Current working directory status:"
        git status --porcelain
        
        # 全ての変更をステージング
        echo "Staging all changes in data directory..."
        git add data/
        
        # ステージング後の状態確認
        echo "After staging:"
        git status --porcelain
        
        # リモートの最新情報を取得
        echo "Fetching latest remote changes..."
        git fetch origin
        
        # コミット作成
        CURRENT_TIME=$(date '+%Y-%m-%d %H:%M:%S JST')
        COMMIT_MESSAGE="Auto-update: Equipment prices (Git conflict resolution fix)

        Update Summary:
        - Update time: ${CURRENT_TIME}
        - Changed files: ${{ steps.check-changes.outputs.changed_files }}
        - ChromeDriver: Auto-detected version
        - Processing mode: Parallel (high-speed)
        - Automated by GitHub Actions"
        
        echo "Creating commit..."
        git commit -m "$COMMIT_MESSAGE" || {
          echo "Commit failed, checking if there are actually changes to commit"
          git status
          if [ -z "$(git diff --cached)" ]; then
            echo "No staged changes found, exiting successfully"
            exit 0
          else
            echo "Staged changes exist but commit failed"
            exit 1
          fi
        }
        
        echo "Commit created successfully"
        
        # プッシュの試行（複数の戦略を使用）
        echo "Attempting to push changes..."
        
        # 戦略1: 通常のプッシュ
        if git push origin ${{ github.ref_name }}; then
          echo "✅ Push successful with normal strategy"
          exit 0
        fi
        
        echo "Normal push failed, trying advanced conflict resolution..."
        
        # 戦略2: リモートとの競合解決
        echo "Fetching and merging remote changes..."
        git fetch origin
        
        # マージの試行
        if git merge origin/${{ github.ref_name }} --no-edit; then
          echo "Merge successful, attempting push again..."
          if git push origin ${{ github.ref_name }}; then
            echo "✅ Push successful after merge"
            exit 0
          fi
        else
          echo "Merge failed, trying reset strategy..."
          git merge --abort 2>/dev/null || true
        fi
        
        # 戦略3: 強制的な解決（データファイルを優先）
        echo "Using force resolution strategy..."
        
        # 現在のコミットを一時的に保存
        TEMP_COMMIT=$(git rev-parse HEAD)
        
        # リモートのHEADをリセット
        git reset --hard origin/${{ github.ref_name }}
        
        # 再度変更をステージングして強制コミット
        git add data/
        git commit -m "$COMMIT_MESSAGE" || {
          echo "No changes to commit after reset"
          exit 0
        }
        
        # 強制プッシュ（with lease for safety）
        if git push --force-with-lease origin ${{ github.ref_name }}; then
          echo "✅ Push successful with force-with-lease"
          exit 0
        fi
        
        # 戦略4: 最終手段の強制プッシュ
        echo "Attempting final force push..."
        if git push --force origin ${{ github.ref_name }}; then
          echo "✅ Push successful with force push"
          exit 0
        fi
        
        echo "❌ All push strategies failed"
        echo "Final git status:"
        git status
        echo "Remote refs:"
        git ls-remote origin
        exit 1
    
    - name: Generate summary
      run: |
        echo "## MapleStory Equipment Price Auto Update Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Basic Information" >> $GITHUB_STEP_SUMMARY
        echo "| Item | Result |" >> $GITHUB_STEP_SUMMARY
        echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Execution Time | $(date '+%Y-%m-%d %H:%M:%S JST') |" >> $GITHUB_STEP_SUMMARY
        echo "| Data Changed | ${{ steps.check-changes.outputs.changed }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Changed Files | ${{ steps.check-changes.outputs.changed_files }} |" >> $GITHUB_STEP_SUMMARY
        echo "| ChromeDriver | Auto-detected compatible version |" >> $GITHUB_STEP_SUMMARY
        echo "| Processing Mode | Parallel (High-Speed) |" >> $GITHUB_STEP_SUMMARY
        echo "| Target Items | ${{ env.TARGET_ITEMS }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Git Strategy | Robust conflict resolution |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.check-changes.outputs.changed }}" == "true" ]; then
          echo "**Price update and git push completed successfully!**" >> $GITHUB_STEP_SUMMARY
        else
          echo "**No changes detected (system operating normally)**" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Collect diagnostic info on failure
      if: failure()
      run: |
        echo "## Workflow Failed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Diagnostic Information" >> $GITHUB_STEP_SUMMARY
        echo "- Execution time: $(date '+%Y-%m-%d %H:%M:%S JST')" >> $GITHUB_STEP_SUMMARY
        echo "- Chrome version: $(google-chrome --version 2>/dev/null || echo 'Not found')" >> $GITHUB_STEP_SUMMARY
        echo "- ChromeDriver version: $(chromedriver --version 2>/dev/null || echo 'Not found')" >> $GITHUB_STEP_SUMMARY
        echo "- Available memory: $(free -h | grep Mem | awk '{print $7}')" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Git Status" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        git status 2>/dev/null || echo "Git status unavailable" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Solution**: Check git conflict resolution in the workflow logs." >> $GITHUB_STEP_SUMMARY
